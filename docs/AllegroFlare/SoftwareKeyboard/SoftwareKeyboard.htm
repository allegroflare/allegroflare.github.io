<!DOCTYPE html>
<head>
<title>AllegroFlare/SoftwareKeyboard/SoftwareKeyboard â€¢ AllegroFlare Game Programming Docs</title>
<style>
*
{
  font-family: 'Arial';
  padding: 0px 0px;
  margin: 0px 0px;
}
#primary_logo
{
  width: 80px;
  float: left;
}
#logo_text
{
  padding-top: 20px;
  font-size: 22px;
  font-weight: bold;
}
#main_nav ul
{
  list-style: none;
}
#main_nav ul li
{
  display: inline-block;
  padding: 10px;
}
#main_nav ul li a
{
  color: white;
}
html
{
}
h1, h2, h3, h4, h5, p
{
  margin-bottom: 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}
.method
{
  color: red;
}
.private_method
{
  color: pink;
}
.dependency
{
  color: green;
}

.component div.property-box
{
  padding: 20px 10px 20px 10px;
  margin: 20px 10px 20px 10px;
  border-radius: 8px;
}

.component .properties
{
  background-color: #dfcfdf;
}

.component .methods
{
  background-color: #cfdfdf;
}

.component .dependencies
{
  background-color: #dfdfcf;
}



.header
{
  background: rgb(204,28,28);
  background: -moz-linear-gradient(175deg, rgba(204,28,28,1) 0%, rgba(176,28,105,1) 100%);
  background: -webkit-linear-gradient(175deg, rgba(204,28,28,1) 0%, rgba(176,28,105,1) 100%);
  background: linear-gradient(175deg, rgba(204,28,28,1) 0%, rgba(176,28,105,1) 100%);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#cc1c1c",endColorstr="#b01c69",GradientType=1);

  color: white;
}
.footer
{
background: rgb(0,0,0);
background: -moz-linear-gradient(172deg, rgba(0,0,0,1) 0%, rgba(122,20,97,1) 100%);
background: -webkit-linear-gradient(172deg, rgba(0,0,0,1) 0%, rgba(122,20,97,1) 100%);
background: linear-gradient(172deg, rgba(0,0,0,1) 0%, rgba(122,20,97,1) 100%);
filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#000000",endColorstr="#7a1461",GradientType=1);

  height: 200px;
  color: white;
  font-weight: bold;
}
.footer a
{
  color: white;
}






/* grid container */
.holy-grail-grid {
    display:grid;
    grid-template-areas:
        'header'
        'main-content'
        'left-sidebar'
        'right-sidebar'
        'footer';
}

/* general column padding */
.holy-grail-grid > * {
    padding:1rem;
}

/* assign columns to grid areas */
.holy-grail-grid > .header {
    grid-area:header;
}
.holy-grail-grid > .main-content {
    grid-area:main-content;
}
.holy-grail-grid > .left-sidebar {
    grid-area:left-sidebar;
}
.holy-grail-grid > .right-sidebar {
    grid-area:right-sidebar;
}
.holy-grail-grid > .footer {
    grid-area:footer;
}

/* tablet breakpoint */
@media (min-width:768px) {
    .holy-grail-grid {
        grid-template-columns: 1fr 1fr;
        grid-template-areas:
            'header header'
            'main-content main-content'
            'left-sidebar right-sidebar'
            'footer footer';
    }
}

/* desktop breakpoint */
@media (min-width:1024px) {
    .holy-grail-grid {
        grid-template-columns: repeat(4, 1fr);
        grid-template-areas:
            'header header header header'
            'left-sidebar main-content main-content right-sidebar'
            'footer footer footer footer';
    }
}







</style>
</head>

<body>
<div class="holy-grail-grid">
  <header class="header">
    <a href="https://www.allegroflare.org"/><img id="primary_logo" src="https://cdn.shopify.com/s/files/1/0557/4495/4531/files/allegro-flare-logo-white-01.png?v=1691080699" alt="AllegroFlare" /></a><p><span id="logo_text">AllegroFlare</span><br><span id="logo_subtext"><em>High level objects for Allegro game programming</em></span></p>
    <div id="main_nav">
      <ul>
        <li><a href="https://www.allegroflare.org/docs">Components</a></li>
        <li><a href="https://github.com/allegroflare/allegro_flare">GitHub</a></li>
      </ul>
    </div>
  </header>
<main class="main-content">

<h1>AllegroFlare/SoftwareKeyboard/SoftwareKeyboard</h1><ul>
  <div class="component">
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">keys</td>
  <td class="property">tsl::ordered_map&lt;std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey&gt;</td>
</tr>
<tr>
  <td class="property">cursor_pos</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_destination</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">cursor_size_destination</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">cursor_reposition_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">show_rectangle_outline_on_keys</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">keyboard_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">prompt_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">result_string</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_permitted_chars</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">event_to_emit_on_pressing_submit_key</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">on_submit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::SoftwareKeyboard::SoftwareKeyboard*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_submit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">cursor_location</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">cursor_size</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">showing_input_error_frame</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">input_error_frame_error_messages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">bonk_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">key_click_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">erase_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_EVENT_TO_EMIT_ON_PRESSING_SUBMIT_KEY</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_BONK_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_KEY_CLICK_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_ERASE_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_CURSOR_REPOSITION_MULTIPLIER</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">reset()</td>
</tr>
<tr>
  <td class="method">set_cursor_reposition_multiplier(float cursor_reposition_multiplier=DEFAULT_CURSOR_REPOSITION_MULTIPLIER)</td>
</tr>
<tr>
  <td class="method">set_keys(tsl::ordered_map&lt;std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey&gt; keys={})</td>
</tr>
<tr>
  <td class="method">set_keyboard_dimentions(float width=1, float height=1)</td>
</tr>
<tr>
  <td class="method">set_keyboard_position(float x=0, float y=0)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">press_key_under_cursor()</td>
</tr>
<tr>
  <td class="method">press_key_by_name(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">show_input_error_frame(std::vector&lt;std::string&gt; input_error_frame_error_messages={})</td>
</tr>
<tr>
  <td class="method">clear_input_error_frame()</td>
</tr>
<tr>
  <td class="method">clear_input_error_frame_error_messages()</td>
</tr>
<tr>
  <td class="method">has_input_error_frame_error_messages()</td>
</tr>
<tr>
  <td class="private_method">validate_and_submit_form()</td>
</tr>
<tr>
  <td class="private_method">update_cursor_destination()</td>
</tr>
<tr>
  <td class="private_method">infer_current_key_name()</td>
</tr>
<tr>
  <td class="method">jump_cursor_pos_to_index_of_key_name(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">increment_cursor_pos()</td>
</tr>
<tr>
  <td class="method">decrement_cursor_pos()</td>
</tr>
<tr>
  <td class="private_method">draw_result_string_and_boxes()</td>
</tr>
<tr>
  <td class="private_method">build_cursor_color()</td>
</tr>
<tr>
  <td class="private_method">build_input_error_frame_color()</td>
</tr>
<tr>
  <td class="private_method">draw_cursor_rectangle(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f)</td>
</tr>
<tr>
  <td class="private_method">draw_cursor_underline(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f)</td>
</tr>
<tr>
  <td class="private_method">draw_input_error_frame(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f)</td>
</tr>
<tr>
  <td class="private_method">draw_cursor()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_keyboard_backfill_and_frame()</td>
</tr>
<tr>
  <td class="private_method">key_exists(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="private_method">emit_bonk_sound_effect()</td>
</tr>
<tr>
  <td class="private_method">emit_key_click_sound_effect()</td>
</tr>
<tr>
  <td class="private_method">emit_erase_sound_effect()</td>
</tr>
<tr>
  <td class="private_method">obtain_keyboard_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_prompt_text_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_result_text_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_error_messages_font()</td>
</tr>
<tr>
  <td class="method">calculate_boilerplate_keyboard_dimentions()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">build_boilerplate_keyboard_keys()</td>
</tr>
<tr>
  <td class="method">calculate_spaced_elements_width(int num_elements=0, float element_width=0.0f, float element_spacing=0.0f)</td>
</tr>
<tr>
  <td class="private_method">join(std::vector&lt;std::string&gt; tokens={}, std::string delimiter=&quot;, &quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tsl::ordered_map&quot;, &quot;headers&quot;=&gt;[&quot;lib/tsl/ordered_map.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SoftwareKeyboard::KeyboardKey&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SoftwareKeyboard/KeyboardKey.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::trim&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SoftwareKeyboard::SoftwareKeyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>


    <h3>Sponsor</h3>
<p>CLUBCATT has <a href="https://clubcatt.com">cat shirts, mugs, games and puzzles</a> you'll love</p>

</main>
    <section class="left-sidebar"></section>
    <aside class="right-sidebar"></aside>
    <footer class="footer">

AllegroFlare - Visit us on <a href="https://github.com/allegroflare/allegro_flare">GitHub</a>

    </footer>
</div>
</body>
